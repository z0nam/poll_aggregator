install.packages("pscl")
install.packages("rstan")
remove.packages("rstan")
if(file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
stop("stan_m must be an object of class stanfit, with parameters mu representing latent vote at a point in time")
library(tidyverse)
library(scales)
library(pscl)
library(forcats)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 7)
#=========2004 election to 2007 election==============
data(AustralianElectionPolling)
data(AustralianElections)
days_between_elections <- as.integer(diff(as.Date(c("2004-10-09", "2007-11-24")))) + 1
#' Function to plot time series extracted from a stan fit of latent state space model of 2007 Australian election
plot_results <- function(stan_m){
if(class(stan_m) != "stanfit"){
stop("stan_m must be an object of class stanfit, with parameters mu representing latent vote at a point in time")
}
ex <- as.data.frame(rstan::extract(stan_m, "mu"))
names(ex) <- 1:d1$n_days
p <- ex %>%
gather(day, value) %>%
mutate(day = as.numeric(day),
day = as.Date(day, origin = "2004-10-08")) %>%
group_by(day) %>%
summarise(mean = mean(value),
upper = quantile(value, 0.975),
lower = quantile(value, 0.025)) %>%
ggplot(aes(x = day)) +
labs(x = "Shaded region shows a pointwise 95% credible interval.",
y = "Voting intention for the ALP (%)",
caption = "Source: Jackman's pscl R package; analysis at https://ellisp.github.io") +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +
geom_line(aes(y = mean)) +
scale_y_continuous(breaks = 31:54, sec.axis = dup_axis(name = "")) +
theme(panel.grid.minor = element_blank())
return(p)
}
#----------------no polls inbetween the elections------------
d1 <- list(mu_start = 37.64, mu_finish = 43.38, n_days = days_between_elections)
# returns some warnings first time it compiles; see
# http://mc-stan.org/misc/warnings.html suggests most compiler
# warnings can be just ignored.
system.time({
stan_mod1 <- stan(file = 'oz-polls-1.stan', data = d1,
control = list(max_treedepth = 20))
}) # 1800 seconds
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
library(tidyverse)
library(tidyverse)
library(scales)
library(pscl)
library(forcats)
library(rstan)
library(pscl)
library(forcats)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
font_import()
font_name = "NanumGothic"
par(family="NanumGothic")
font_name = "NanumGothic"
par(family="NanumGothic")
## Data import
```{r data import}
data <- read.table(file="_data/boondang_eul_test.txt", sep="\t", header = T)
data <- read.table(file="_data/boondang_eul_test.txt", sep="\t", header = T)
colnames(data) = c('startdate','durringdate','enddate','area1','area2','area3','SAE','MIN','PEOPLE','JUS','UNK1','UNK2','UNK3','house','press','method','ARS','N','rate','weight','age')
data$startdate <- as.Date(as.character(data$startdate))
data$durringdate <- as.Date(as.character(data$durringdate))
data$enddate <- as.Date(as.character(data$enddate))
head(data)
START_DATE <- as.Date(as.character("2016-03-15"))
END_DATE <- as.Date(as.character("2016-04-15"))
MU_START <- 15 # 종로 35 수성갑 50 분당을 20
MU_FINISH <- 39.85 # 종로 52.6 수성갑 62.3 분당을 39.85
Y_MIN <- 20
Y_MAX <- 60
days_between_elections <- as.integer(diff(as.Date(c(START_DATE, END_DATE))))  + 1
install_fonts()
library(extrafonts)
install.packages("extrafont")
library(extrafont)
install_font()
install_fonts()
font_import()
font_import(pattern="Nanum")
warnings()
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_standalone_sigma2.R', echo=TRUE)
