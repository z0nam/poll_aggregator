install.packages("pscl")
install.packages("rstan")
remove.packages("rstan")
if(file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
library("rstan")
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
stop("stan_m must be an object of class stanfit, with parameters mu representing latent vote at a point in time")
library(tidyverse)
library(scales)
library(pscl)
library(forcats)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = 7)
#=========2004 election to 2007 election==============
data(AustralianElectionPolling)
data(AustralianElections)
days_between_elections <- as.integer(diff(as.Date(c("2004-10-09", "2007-11-24")))) + 1
#' Function to plot time series extracted from a stan fit of latent state space model of 2007 Australian election
plot_results <- function(stan_m){
if(class(stan_m) != "stanfit"){
stop("stan_m must be an object of class stanfit, with parameters mu representing latent vote at a point in time")
}
ex <- as.data.frame(rstan::extract(stan_m, "mu"))
names(ex) <- 1:d1$n_days
p <- ex %>%
gather(day, value) %>%
mutate(day = as.numeric(day),
day = as.Date(day, origin = "2004-10-08")) %>%
group_by(day) %>%
summarise(mean = mean(value),
upper = quantile(value, 0.975),
lower = quantile(value, 0.025)) %>%
ggplot(aes(x = day)) +
labs(x = "Shaded region shows a pointwise 95% credible interval.",
y = "Voting intention for the ALP (%)",
caption = "Source: Jackman's pscl R package; analysis at https://ellisp.github.io") +
geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +
geom_line(aes(y = mean)) +
scale_y_continuous(breaks = 31:54, sec.axis = dup_axis(name = "")) +
theme(panel.grid.minor = element_blank())
return(p)
}
#----------------no polls inbetween the elections------------
d1 <- list(mu_start = 37.64, mu_finish = 43.38, n_days = days_between_elections)
# returns some warnings first time it compiles; see
# http://mc-stan.org/misc/warnings.html suggests most compiler
# warnings can be just ignored.
system.time({
stan_mod1 <- stan(file = 'oz-polls-1.stan', data = d1,
control = list(max_treedepth = 20))
}) # 1800 seconds
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
plot_results(stan_mod1) +
ggtitle("Voting intention for the ALP between the 2004 and 2007 Australian elections",
"Latent variable estimated with no use of polling data")
library(tidyverse)
library(tidyverse)
library(scales)
library(pscl)
library(forcats)
library(rstan)
library(pscl)
library(forcats)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
font_import()
font_name = "NanumGothic"
par(family="NanumGothic")
font_name = "NanumGothic"
par(family="NanumGothic")
## Data import
```{r data import}
data <- read.table(file="_data/boondang_eul_test.txt", sep="\t", header = T)
data <- read.table(file="_data/boondang_eul_test.txt", sep="\t", header = T)
colnames(data) = c('startdate','durringdate','enddate','area1','area2','area3','SAE','MIN','PEOPLE','JUS','UNK1','UNK2','UNK3','house','press','method','ARS','N','rate','weight','age')
data$startdate <- as.Date(as.character(data$startdate))
data$durringdate <- as.Date(as.character(data$durringdate))
data$enddate <- as.Date(as.character(data$enddate))
head(data)
START_DATE <- as.Date(as.character("2016-03-15"))
END_DATE <- as.Date(as.character("2016-04-15"))
MU_START <- 15 # 종로 35 수성갑 50 분당을 20
MU_FINISH <- 39.85 # 종로 52.6 수성갑 62.3 분당을 39.85
Y_MIN <- 20
Y_MAX <- 60
days_between_elections <- as.integer(diff(as.Date(c(START_DATE, END_DATE))))  + 1
install_fonts()
library(extrafonts)
install.packages("extrafont")
library(extrafont)
install_font()
install_fonts()
font_import()
font_import(pattern="Nanum")
warnings()
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_result)
View(result_1)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_result)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_result)
write.csv(total_result,file="total_result.csv")
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(results_1)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/functions.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_result)
write.csv(total_result, file="total_result.csv")
total_result %>% select("mean","sd")
total_result %>% select("mu","sd")
total_result %>% filter("region"==region)
total_result %>% filter(region=="region")
total_result %>% filter(.$region==region)
region
total_result %>% select(.$region==region)
total_result %>% filter(.$region==region)
total_result %>% select(.$region==region)
total_result %>% filter(region==region)
total_result %>% filter(region=="서울시강서구을")
total_result %>% filter(region=="서울시강서구갑")
total_result %>% filter(region=="서울강서구을")
localdata <- total_result %>% filter(region=="서울강서구을")
partyList <- unique(localdata$party)
partyList
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
days_between_elections
View(localdata)
tmp_data <- total_result %>% filter(region=="서울강서구을")
View(tmp_data)
View(total_result)
str(total_result$date)
END_DATE
END_DATE-1
for( day in START_DATE:(END_DATE-1)){
print(day)
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date=day))
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==day))
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==as.Date(day))
}
# do_something to calculate prob.
return(total_result)
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==as.Date(day))
}
# do_something to calculate prob.
return(total_result)
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==as.Date(day))
}
# do_something to calculate prob.
return(total_result)
}
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==as.Date(day))
}
partyList = unique(localdata$party)
for( day in START_DATE:(END_DATE-1)){
print(tmp_data %>% filter(date==as.Date(day)))
}
print(as.Date(day))
for( day in START_DATE:(END_DATE-1)){
print(as.Date(day))
print(tmp_data %>% filter(date==as.Date(day)))
}
for( day in START_DATE:(END_DATE-1)){
print(str(day))
print(tmp_data %>% filter(date==as.Date(day)))
}
days = seq(START_DATE, END_DATE-1, by="day")
for( day in days){
print(day)
print(tmp_data %>% filter(date==as.Date(day)))
}
for( day in days){
print(days[day])
print(tmp_data %>% filter(date==as.Date(day)))
}
for( day in seq_along(days){
print(days[day])
print(tmp_data %>% filter(date==as.Date(day)))
}
# do_something to calculate prob.
return(total_result)
}
for( day in seq_along(days)){
print(days[day])
print(tmp_data %>% filter(date==as.Date(day)))
}
for( day in seq_along(days)){
print(days[day])
print(tmp_data %>% filter(date==days[day]))
}
for( day in seq_along(days)){
print(days[day])
print(tmp_data %>% filter(date==as.Date(days[day]))
}
# do_something to calculate prob.
return(total_result)
}
partyList = unique(localdata$party)
days = seq(START_DATE, END_DATE-1, by="day")
for( day in seq_along(days)){
print(days[day])
print(tmp_data %>% filter(date==as.Date(days[day]))
}
# do_something to calculate prob.
# return(total_result)
}
for( day in seq_along(days)){
print(tmp_data %>% filter(date==as.Date(days[day]))
}
days = seq(START_DATE, END_DATE-1, by="day")
for( day in seq_along(days)){
print(tmp_data %>% filter(date==as.Date(days[day]))
}
for( day in seq_along(days)){}
for( day in seq_along(days)){print(days[day])}
for( day in seq_along(days)){print(tmp_data %>% filter(date==as.Date(days[day])))}
str(days[day])
for( day in seq_along(days)){print(tmp_data %>% filter(date==(days[day])))}
tmp_data
View(tmp_data)
View(localdata)
for( day in seq_along(days)){print(localdata %>% filter(date==(days[day])))}
for( day in seq_along(days)){print(localdata %>% filter(date==days[day]))}
for( day in seq_along(days)){print(day)}
for( day in seq_along(days)){print(days[day])}
for( day in seq_along(days)){print(str(days[day])}
for( day in seq_along(days)){print(str(days[day]))}
for( day in seq_along(days)){print(str(days[day][1]))}
for( day in seq_along(days)){print(str(days[day]))}
for( day in seq_along(days)){print(typeof(days[day]))}
for( day in seq_along(days)){print(class(days[day]))}
for( day in seq_along(days)){localdata %>% filter(date==days[day])}
for( day in seq_along(days)){localdata %>% filter(date==days[day][1])}
for( day in seq_along(days)){total_result %>% filter(date==days[day])}
for( day in seq_along(days)){tmp<-total_result %>% filter(date==days[day])}
View(tmp)
for( day in seq_along(days)){tmp<-total_result %>% filter(date==days[day],party="민주당")}
for( day in seq_along(days)){tmp<-total_result %>% filter(date==days[day],party=="민주당")}
for( day in seq_along(days)){tmp<-total_result %>% filter(date==days[day])}
posteria_test <- rnorm(10000, tmp["mu"], tmp["sd"])
tmp["mu"]
tmp["sd"]
posteria <- rnorm(10000, tmp_data["mu"], tmp_data["sd"])
}
# return(total_result)
}
single_row <- tmp %>% filter(party=="민주당")
View(single_row)
posteria <- rnorm(10000, single_row["mu"], single_row["sd"])
mu <- single_row["mu"]
sd <- single_row["sd"]
posteria <- rnorm(10000, mu, sd)
mu
sd
rnorm(10000, mu, sd)
mu[1]
rnorm(10000, c(mu), c(sd))
mu
c(mu)
rnorm( 10000, 3, 2)
mu <- single_row["mu"][1]
mu
class(mu)
as.numeric(mu)
class(as.numeric(mu))
rnorm(10000, as.numeric(mu), as.numeric(sd))
posteria
# posteria <- rnorm(10000, tmp_data["mu"], tmp_data["sd"])
poteria <- c()
for(p in local_party_list){
single_row <- tmp_data %>% filter(party==p)
mu <- as.numeric(single_row["mu"])
sd <- as.numeric(single_row["sd"])
posteria <- rbind(posteria, rnorm(10000, mu, sd))
}
which(max(posteria[,1]))
posteria <- c(rnorm(10000,1,1), rnorm(10000,1,2), rnorm(10000,1.1,2))
posteria
posteria
View(posteria)
posteria <- rbind(rnorm(10000,1,1), rnorm(10000,1,2), rnorm(10000,1.1,2))
which(posteria[,1])
max(posteria[,1])
which(max(posteria[,1]))]
which(max(posteria[,1]))
which(posteria[,1] == max(posteria[,1]))
num_win[which(posteria[,1] == max(posteria[,1]))]+=1
num_win[which(posteria[,1] == max(posteria[,1]))]<-num_win[which(posteria[,1] == max(posteria[,1]))]+1
test <- c()
test
test <- cbind(test,0)
test
test <- cbind(test,0)
test
test[which(posteria[,1] == max(posteria[,1]))]<-test[which(posteria[,1] == max(posteria[,1]))]+1
test
View(total_result)
total_result %>% filter(date==as.Date(as.character("2016-03-10")), party=="새누리당") %>% cbind(0.33)
total_result %>% filter(date==as.Date(as.character("2016-03-10")), party=="새누리당") %>% cbind(prob=0.33)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
print(local_party_list)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_prob)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
View(total_prob)
write.csv(total_prob, file="total_prob.csv")
test <- left_join(total_result, total_prob, by=c("date", "region", "party"))
View(test)
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_stdalone.R', echo=TRUE)
install.packages(c("Rcpp", "inline"), type = "source")
install.packages(c("Rcpp", "inline"), type = "source")
install.packages(c("Rcpp", "inline"), type = "source")
install.packages(c("Rcpp", "inline"), type = "source")
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_standalone_sigma2.R', echo=TRUE)
# ---
#   title: "Poll Aggregator with sigma 2"
# author: "Namun Cho"
# date: "3/10/2020"
# output: html_document
# ---
#
#   ```{r setup, include=FALSE}
rm(list=ls())
# knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(pscl)
library(forcats)
library(rstan)
library(knitr)
rstan_options(auto_write = TRUE)
# options(mc.cores = parallel::detectCores() - 2)
options(mc.cores = 1) # seg falut 11 때문에 (메모리 부족) core는 1만 돌려야 한다.
library(extrafont)   # 실행한 적 없는 경우 콘솔에서 font_import() 한 번 실행할 것. (ttf import to R) 시간 오래 걸림, ggplot2에서 한글 깨지지 않는 경우 본 행은 무시해도 무방함.
theme_update(text=element_text(family="NanumGothic"))
setwd('/Users/j/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/')
# FILENAME="20대data_toy.csv" # _toy: 경우의 수 별 4개 지역 로딩
FILENAME="20대data_3.csv" # 전체 지역 로딩
SIGNIFICANT_LEVEL = 0.99 # 유의수준
z <- qnorm((1-SIGNIFICANT_LEVEL)/2, lower.tail=F) # critical value for norm dist
# todo: date 최소 최대 문자열에서 찾아서
YEAR <- 2016
START_DATE <- as.Date(as.character("2016-03-10"))
END_DATE <- as.Date(as.character("2016-04-07"))
days_between_elections <- as.integer(diff(as.Date(c(START_DATE, END_DATE))))  + 1
Y_MIN <- 0
Y_MAX <- 100
PartyList <- list(SAE='새누리당',MIN='민주당',PEOPLE='국민의당',JUS='정의당',UNK1='무소속1',UNK2='무소속2',UNK3='무소속3')
cat("Reading data...\n")
data <- read.csv(FILENAME)
cat ("Done!\n")
colnames(data) = c('startdate','durringdate','enddate',
'area1','area2','area3',
'SAE_raw','MIN_raw','PEOPLE_raw',
'JUS_raw','UNK1_raw','UNK2_raw','UNK3_raw',
'SAE','MIN','PEOPLE','JUS','UNK1','UNK2','UNK3',
'non_res',
'house','press','method','ARS','N','rate',
'weight','age')
source('~/Documents/writings/2020/20200303_poll_aggregater/_analysis/_cho/poll_aggregator_standalone_sigma2.R', echo=TRUE)
